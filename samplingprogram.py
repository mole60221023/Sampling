# -*- coding: utf-8 -*-
"""SamplingProgram

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_az-OY5nZEzHf4H39n3snLBB1npdD9lu

Use the section below for Parts 1, 2, and 5 of the Sampling exercise.
"""

import random
import matplotlib.pyplot as plt
import numpy as np

Sample_Size =  500#@param {type:"integer"}
Scarlet_Percent =  50#@param {type:"integer"}
Gray_Percent =  50#@param {type:"integer"}


particles = ["Scarlet", "Gray"]

sample=random.choices(particles, weights = [Scarlet_Percent,Gray_Percent], k = Sample_Size)

Number_of_Scarlet=sample.count("Scarlet")
Number_of_Gray=sample.count("Gray")

print("Number of Scarlet = ", +Number_of_Scarlet)
print("Number of Gray = ", +Number_of_Gray)
print()
print("Percent Scarlet = ", +round((Number_of_Scarlet/Sample_Size*100),2))
print("Percent Gray = ", +round((Number_of_Gray/Sample_Size*100),2))

#@title
objects = ('Scarlet', 'Gray',)
y_pos = np.arange(len(objects))
scarletgray = [Number_of_Scarlet, Number_of_Gray]

plt.bar(y_pos, scarletgray, align='center', alpha=1, color=('#be0119','#929591'))
plt.xticks(y_pos, objects)
plt.ylabel('Number')
plt.title('Number of Scarlet and Gray')

plt.show()

"""**----------------------------------------------------------**

**Use the section below for Part 3 of the Sampling exercise.**

**Only run the first block of code once!!**

---


 

1.  Run the first block of code one time.  Only once! This sets the unknown percent.  If you run this block after running the second block you reset the program and will need to rerun the second block.
2.  Run the second block of code.  You can run the second block of code as many times as you want.
3.  Use the results from the second block of code to answer the questions in Part 3 of the assignment.

Block 1:
"""

#@title
#Only run this block once!!
import random
from random import randint
for _ in range(1):
	value = randint(1, 9)*0.1

"""Block 2:"""

#@title
import numpy as np
import matplotlib.pyplot as plt

sample_size =  50#@param {type:"number"}
Scarlet_probability = value 
Gray_probability =1-value
#generate an array of 0 or 1 with x length, 0 and 1 have unequal equal probabilities (p=0.5)

array = np.random.choice(2,sample_size,p=[Scarlet_probability, Gray_probability])
zero = np.count_nonzero(array == 0)
one = np.count_nonzero(array == 1)
print("number of gray=", +zero)
print("number of scarlet=", +one)
print("% gray=", +(zero/sample_size*100))
print("% scarlet=", +(one/sample_size*100))

#@title
objects = ('scarlet', 'gray',)
y_pos = np.arange(len(objects))
scarletgray = [one, zero]

plt.bar(y_pos, scarletgray, align='center', alpha=1, color=('#be0119','#929591'))
plt.xticks(y_pos, objects)
plt.ylabel('Number')
plt.title('Number of Scarlet and Gray')

plt.show()

"""Block 3: Do not run this block of code below until instructed to do so in the assignment.  """

#@title
print ("% Scarlet= ", +round(value*100))
print ("% Gray= ", +round((1-value)*100))

"""**__________________________________________________________________**

**Use the code below to answer questions from Part 4 of the sampling exercise.**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import statistics
import random

Sample_Size =  2000#@param {type:"integer"}
number_of_times_to_sample =  5#@param {type:"integer"}
Scarlet_Percent =  50#@param {type:"number"}
Gray_Percent = 50#@param {type:"number"}

particles = ["Scarlet", "Gray"]

Scarlet=np.empty(0)
Gray=np.empty(0)
for x in range(number_of_times_to_sample):
    sample=random.choices(particles, weights = [Scarlet_Percent,Gray_Percent], k = Sample_Size)
    Scarlet=np.append(sample.count("Scarlet"), [Scarlet])
    Gray=np.append(sample.count("Gray"), [Gray])

plt.plot(Gray, color='#929591', marker='o')
plt.ylabel('number of gray')
plt.show()

plt.plot(Scarlet, color='#be0119', marker='o')
plt.ylabel('number of scarlet')
plt.show()

print("gray average = ", + statistics.mean(Gray))
print("gray standard deviation = ", + round(statistics.stdev(Gray),2))
print("% gray average=", +(statistics.mean(Gray)/Sample_Size*100))
print("% gray standard deviation=", + round((statistics.stdev(Gray)/Sample_Size*100),2))
print("gray % rel. standard deviation= ", +round(statistics.stdev(Gray)/statistics.mean(Gray)*100,2))
print()
print("scarlet average = ", + statistics.mean(Scarlet))
print("scarlet standard deviation = ", + round(statistics.stdev(Scarlet),2))
print("% scarlet average=", +(statistics.mean(Scarlet)/Sample_Size*100))
print("% scarlet standard deviation=", + round((statistics.stdev(Scarlet)/Sample_Size*100),2))
print("scarlet % rel. standard deviation= ", +round(statistics.stdev(Scarlet)/statistics.mean(Scarlet)*100,2))

"""**_______________________________________________________________**

**Use the following code for Part 6 of the Sampling exercise.**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import statistics
import random

sample_mass =  0.7#@param {type:"number"}
number_of_times_to_sample =  3#@param {type:"integer"}
Scarlet_Percent =  2#@param {type:"number"}
Gray_Percent = 98#@param {type:"number"}

Sample_Size=int((sample_mass/(1.807*0.000000523)))

particles = ["Scarlet", "Gray"]

Scarlet=np.empty(0)
Gray=np.empty(0)
for x in range(number_of_times_to_sample):
    sample=random.choices(particles, weights = [Scarlet_Percent,Gray_Percent], k = Sample_Size)
    Scarlet=np.append(sample.count("Scarlet"), [Scarlet])
    Gray=np.append(sample.count("Gray"), [Gray])

print("scarlet average = ", + statistics.mean(Scarlet))
print("scarlet standard deviation = ", + round(statistics.stdev(Scarlet),2))
print("% scarlet average=", +(statistics.mean(Scarlet)/Sample_Size*100))
print("% scarlet standard deviation=", + round((statistics.stdev(Scarlet)/Sample_Size*100),2))
print("scarlet % rel. standard deviation= ", +round(statistics.stdev(Scarlet)/statistics.mean(Scarlet)*100,2))
print()
print("gray average = ", + statistics.mean(Gray))
print("gray standard deviation = ", + round(statistics.stdev(Gray),2))
print("% gray average=", +(statistics.mean(Gray)/Sample_Size*100))
print("% gray standard deviation=", + round((statistics.stdev(Gray)/Sample_Size*100),2))
print("gray % rel. standard deviation= ", +round(statistics.stdev(Gray)/statistics.mean(Gray)*100,2))